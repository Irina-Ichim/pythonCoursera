Este fragmento proporciona una explicación detallada sobre JSON (JavaScript Object Notation) y cómo trabajar con él en Python utilizando 
la biblioteca json. Aquí están los puntos clave:

1. **Características de JSON:**
   - JSON es legible por humanos, lo que significa que está codificado con caracteres imprimibles y formateado de manera que un humano 
   pueda entenderlo.
   - Aunque se menciona que es legible por humanos, el fragmento enfatiza que es más fácil trabajar con JSON utilizando la biblioteca json en 
   lugar de hacerlo manualmente.

2. **Elementos Básicos de JSON:**
   - JSON admite varios elementos de diferentes tipos de datos básicos.
   - Strings se representan con comillas, números no llevan comillas.
   - Objects son estructuras de pares clave-valor, equivalentes a diccionarios en Python.
   - Un par clave-valor puede contener otro objeto como valor.
   - Arrays son equivalentes a listas en Python y pueden contener strings, números, objects u otros arrays.

3. **Uso de la Biblioteca json:**
   - La biblioteca `json` en Python facilita la serialización y deserialización de objetos Python a y desde JSON.
   - El método `json.dump()` serializa objetos Python y los escribe en un archivo.
   - El método `json.dumps()` hace lo mismo pero devuelve una cadena en lugar de escribir directamente en un archivo.
   - El método `json.load()` deserializa JSON desde un archivo a objetos Python.
   - El método `json.loads()` deserializa JSON desde una cadena a objetos Python.

4. **Ejemplos de Uso:**
   - Se proporcionan ejemplos prácticos de cómo usar `json.dump()` y `json.dumps()` para serializar objetos Python a JSON.
   - Se muestra cómo mejorar la legibilidad del JSON resultante usando el parámetro `indent` en `json.dump()`.

5. **Inversa de Serialización:**
   - Se menciona que el método `json.load()` invierte la operación de `json.dump()`, deserializando JSON desde un archivo a objetos Python.

6. **Limitaciones de JSON:**
   - Se advierte que los elementos JSON solo pueden representar tipos de datos simples y que objetos Python complejos no se pueden serializar 
   automáticamente como JSON.
