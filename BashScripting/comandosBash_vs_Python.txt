# Ejecución de Comandos Basados en Condiciones en Bash vs. Python

# En Bash, se utilizan comandos y operadores para ejecutar acciones basadas en condiciones. Aquí hay un ejemplo:

# Comprobar si un archivo existe en Bash:
# Sintaxis: if [ -e archivo ]; then comando; fi
# Ejemplo en Bash:
# if [ -e archivo.txt ]; then
#     echo "El archivo existe."
# else
#     echo "El archivo no existe."
# fi

# En Python, se utilizan declaraciones condicionales if para realizar acciones basadas en condiciones. Aquí hay un ejemplo:

# Comprobar si un archivo existe en Python:
# Sintaxis: if condición: comando
# Ejemplo en Python:
# import os
# if os.path.exists("archivo.txt"):
#     print("El archivo existe.")
# else:
#     print("El archivo no existe.")

# Diferencias entre Bash y Python:
# 1. Sintaxis: Bash utiliza comandos y operadores como [-e archivo] para evaluar condiciones, mientras que Python utiliza una sintaxis más legible.
# 2. Legibilidad: Python utiliza sangrías para delimitar bloques de código, lo que lo hace más legible, mientras que Bash se basa en comandos y operadores.
# 3. Flexibilidad: Python proporciona una amplia gama de funciones y bibliotecas para abordar condiciones específicas, lo que lo hace más versátil.
# 4. Estructuras de selección múltiple: Bash utiliza la instrucción "case" para estructuras de selección múltiple, mientras que Python utiliza "if-elif" para emular esta funcionalidad.

# Similitudes y Diferencias Adicionales:
# - **Estructuras de Control de Flujo Condicional (If)**:
#   - Bash y Python utilizan la instrucción "if" para crear estructuras de control de flujo condicional.
#   - Ambos lenguajes permiten ejecutar comandos basados en condiciones.
# - **Estructuras de Control de Flujo de Caso (Switch/Case)**:
#   - Bash y Python emulan estructuras de selección múltiple, pero Bash utiliza "case" y Python "if-elif" para lograrlo.
#   - Python utiliza una sintaxis más legible con sangrías.
# - **Python ofrece más flexibilidad y versatilidad para abordar condiciones específicas.**

 #Un bloque condicional en Bash que comienza con 'if', el bloque se cierra con la palabra clave 'fi'. El 'fi' se utiliza para indicar el final de las declaraciones condicionales y es una parte fundamental de la sintaxis de control de flujo en Bash. Cuando usas 'if' para comenzar un bloque condicional en Bash, debes finalizar ese bloque con 'fi' para que el script funcione correctamente
# Conclusión:
# Tanto Bash como Python ofrecen la capacidad de ejecutar comandos basados en condiciones. La elección entre ellos depende de la complejidad de la tarea y de la preferencia del desarrollador. Python es conocido por su legibilidad y versatilidad, mientras que Bash se utiliza comúnmente para automatizar tareas de línea de comandos.
